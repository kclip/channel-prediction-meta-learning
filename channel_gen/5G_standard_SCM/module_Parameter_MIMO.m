classdef module_Parameter_MIMO < handle
    
    properties
        mu;
        delta_f_max = 480e3;
        Nf = 4096;
        Tc;
        delta_f_ref = 15e3;
        Nf_ref = 2048;
        Ts;
        kappa;
        %% OFDM duration
        N_u;
        N_cp_0_7;
        N_cp_others;
        % symbol duration
        symbol_duration = zeros(1,2);
        num_cp = zeros(1,2); % number of cp samples
        num_data = zeros(1,2); % number of data samples
        num_FFT; % actual num_FFT we use
        T_actual_sampling; % actual sampling time we use
        c_init = 1;
        sequence_length;
        total_rs_num;
        cdl;
        num_RB;
        fc;
        SampleRate;
        %% CDL
        theta_v;
        phi_v;
        t;
        Tx_pol;
        Rx_pol;
        N1;
        N2;
        num_Tx_antenna;
        TxArrayType;
        M1;
        M2;
        num_Rx_antenna;
        RxArrayType;
        DS;
        Channel; % contains channel setting
        user_speed;
        CDL;
        c_ASD;
        c_ASA;
        c_ZSD;
        c_ZSA;
        XPR_dB;
        %%
        AS_ratio = 1;
        CurrentTime;
        L; % length of taps we consider (selected with cp length)
        pol_slant_angle = [-45 45];
        Tx_d_lambda = 0.5; % Tx antenna spacing
        Rx_d_lambda = 0.5; % Rx antenna spacing
        Tx_downtilt = 0;
        light_speed = 299792458; % m/s
        Tx_pattern_type = 'Pattern'; % 'Omni-directional' or 'Pattern' % change to UL TODO
        Rx_pattern_type = 'Omni-directional'; % 'Omni-directional' or 'Pattern'
    end


    methods (Static)
        function obj = module_Parameter_MIMO(init)
            obj.CurrentTime = init.InitialTime;
            obj.mu = init.mu;
            obj.num_RB = init.num_RB;
            obj.fc = init.fc;
            obj.total_rs_num = init.total_rs_num;
            obj.num_FFT = init.num_FFT;
            % calculation
            calc(obj);
            % related to CDL
            obj.theta_v = init.theta_v;
            obj.phi_v = init.phi_v; 
            % antenna array set-up
            obj.Tx_pol = init.Tx_pol; % Tx polarization
            obj.Rx_pol = init.Rx_pol; % Rx polarization
            if isfield(init,'num_Tx_antenna_horizontal') && isfield(init,'num_Tx_antenna_vertical')
                obj.N1 = init.num_Tx_antenna_horizontal;
                obj.N2 = init.num_Tx_antenna_vertical;
                obj.num_Tx_antenna = init.num_Tx_antenna_horizontal * init.num_Tx_antenna_vertical * obj.Tx_pol;
                obj.TxArrayType = 'URA';
            else
                error("Input the number of transmit antennas \n");
            end
   
            if isfield(init,'num_Rx_antenna_horizontal') && isfield(init,'num_Rx_antenna_vertical')
                obj.M1 = init.num_Rx_antenna_horizontal;
                obj.M2 = init.num_Rx_antenna_vertical;     
                obj.num_Rx_antenna = init.num_Rx_antenna_horizontal * init.num_Rx_antenna_vertical * obj.Rx_pol;
                obj.RxArrayType = 'URA';
            else
                error("Input the number of Receive antennas \n");
            end
            % delay spread
            obj.DS = init.DS; 
            % CDL channels
            obj.Channel.type = init.ch_type;
            switch obj.Channel.type
                case{'CDL_A'}
                    obj.CDL = [ ...
                        0.0000	-13.4	-178.1	51.3	50.2	125.4; ...
                        0.3819	0	-4.2	-152.7	93.2	91.3; ...
                        0.4025	-2.2	-4.2	-152.7	93.2	91.3; ...
                        0.5868	-4	-4.2	-152.7	93.2	91.3; ...
                        0.4610	-6	90.2	76.6	122	94; ...
                        0.5375	-8.2	90.2	76.6	122	94; ...
                        0.6708	-9.9	90.2	76.6	122	94; ...
                        0.5750	-10.5	121.5	-1.8	150.2	47.1; ...
                        0.7618	-7.5	-81.7	-41.9	55.2	56; ...
                        1.5375	-15.9	158.4	94.2	26.4	30.1; ...
                        1.8978	-6.6	-83	   51.9	   126.4	58.8; ...
                        2.2242	-16.7	134.8	-115.9	171.6	26; ...
                        2.1718	-12.4	-153	26.6	151.4	49.2; ...
                        2.4942	-15.2	-172	76.6	157.2	143.1; ...
                        2.5119	-10.8	-129.9	-7	47.2	117.4; ...
                        3.0582	-11.3	-136	-23	40.4	122.7; ...
                        4.0810	-12.7	165.4	-47.2	43.3	123.2; ...
                        4.4579	-16.2	148.4	110.4	161.8	32.6; ...
                        4.5695	-18.3	132.7	144.5	10.8	27.2; ...
                        4.7966	-18.9	-118.6	155.3	16.7	15.2; ...
                        5.0066	-16.6	-154.1	102	171.7	146; ...
                        5.3043	-19.9	126.5	-151.8	22.7	150.7; ...
                        9.6586	-29.7	-56.2	55.2	144.9	156.1; ...
                        ];
                    obj.c_ASD = 5; %degrees
                    obj.c_ASA = 11;
                    obj.c_ZSD = 3;
                    obj.c_ZSA = 3;
                    obj.XPR_dB = 10;
                    obj.Channel.PDP_dB = [obj.CDL(:,2) obj.CDL(:,1)*obj.DS]';  

                case{'CDL_B'}
                    obj.CDL = [ ...
                        0.0000	0	9.3	-173.3	105.8	78.9; ...
                        0.1072	-2.2	9.3	-173.3	105.8	78.9; ...
                        0.2155	-4	9.3	-173.3	105.8	78.9; ...
                        0.2095	-3.2	-34.1	125.5	115.3	63.3; ...
                        0.2870	-9.8	-65.4	-88.0	119.3	59.9; ...
                        0.2986	-1.2	-11.4	155.1	103.2	67.5; ...
                        0.3752	-3.4	-11.4	155.1	103.2	67.5; ...
                        0.5055	-5.2	-11.4	155.1	103.2	67.5; ...
                        0.3681	-7.6	-67.2	-89.8	118.2	82.6; ...
                        0.3697	-3	52.5	132.1	102.0	66.3; ...
                        0.5700	-8.9	-72	-83.6	100.4	61.6; ...
                        0.5283	-9	74.3	95.3	98.3	58.0; ...
                        1.1021	-4.8	-52.2	103.7	103.4	78.2; ...
                        1.2756	-5.7	-50.5	-87.8	102.5	82.0; ...
                        1.5474	-7.5	61.4	-92.5	101.4	62.4; ...
                        1.7842	-1.9	30.6	-139.1	103.0	78.0; ...
                        2.0169	-7.6	-72.5	-90.6	100.0	60.9; ...
                        2.8294	-12.2	-90.6	58.6	115.2	82.9; ...
                        3.0219	-9.8	-77.6	-79.0	100.5	60.8; ...
                        3.6187	-11.4	-82.6	65.8	119.6	57.3; ...
                        4.1067	-14.9	-103.6	52.7	118.7	59.9; ...
                        4.2790	-9.2	75.6	88.7	117.8	60.1; ...
                        4.7834	-11.3	-77.6	-60.4	115.7	62.3; ...
                        ];
                    
                    obj.c_ASD = 10; %degrees
                    obj.c_ASA = 22;
                    obj.c_ZSD = 3;
                    obj.c_ZSA = 7;
                    obj.XPR_dB = 8;
                    
                    obj.Channel.PDP_dB = [obj.CDL(:,2) obj.CDL(:,1)*obj.DS]';

                case{'CDL_C'}
                    obj.CDL = [ ...
                        0	-4.4	-46.6	-101	97.2	87.6; ...
                        0.2099	-1.2	-22.8	120	98.6	72.1; ...
                        0.2219	-3.5	-22.8	120	98.6	72.1; ...
                        0.2329	-5.2	-22.8	120	98.6	72.1; ...
                        0.2176	-2.5	-40.7	-127.5	100.6	70.1; ...
                        0.6366	0	0.3	170.4	99.2	75.3; ...
                        0.6448	-2.2	0.3	170.4	99.2	75.3; ...
                        0.6560	-3.9	0.3	170.4	99.2	75.3; ...
                        0.6584	-7.4	73.1	55.4	105.2	67.4; ...
                        0.7935	-7.1	-64.5	66.5	95.3	63.8; ...
                        0.8213	-10.7	80.2	-48.1	106.1	71.4; ...
                        0.9336	-11.1	-97.1	46.9	93.5	60.5; ...
                        1.2285	-5.1	-55.3	68.1	103.7	90.6; ...
                        1.3083	-6.8	-64.3	-68.7	104.2	60.1; ...
                        2.1704	-8.7	-78.5	81.5	93.0	61.0; ...
                        2.7105	-13.2	102.7	30.7	104.2	100.7; ...
                        4.2589	-13.9	99.2	-16.4	94.9	62.3; ...
                        4.6003	-13.9	88.8	3.8	93.1	66.7; ...
                        5.4902	-15.8	-101.9	-13.7	92.2	52.9; ...
                        5.6077	-17.1	92.2	9.7	106.7	61.8; ...
                        6.3065	-16	93.3	5.6	93.0	51.9; ...
                        6.6374	-15.7	106.6	0.7	92.9	61.7; ...
                        7.0427	-21.6	119.5	-21.9	105.2	58; ...
                        8.6523	-22.8	-123.8	33.6	107.8	57; ...
                        ];
                    obj.Channel.PDP_dB = [obj.CDL(:,2) obj.CDL(:,1)*obj.DS]';
                    
                    obj.c_ASD = 2; %degrees
                    obj.c_ASA = 15;
                    obj.c_ZSD = 3;
                    obj.c_ZSA = 7;
                    obj.XPR_dB = 7;

                case{'CDL_D'}
                    obj.CDL = [ ...
                        0	-0.2	0	-180	98.5	81.5; ...
                        0	-13.5	0	-180	98.5	81.5; ...
                        0.035	-18.8	89.2	89.2	85.5	86.9; ...
                        0.612	-21	89.2	89.2	85.5	86.9; ...
                        1.363	-22.8	89.2	89.2	85.5	86.9; ...
                        1.405	-17.9	13	163	97.5	79.4; ...
                        1.804	-20.1	13	163	97.5	79.4; ...
                        2.596	-21.9	13	163	97.5	79.4; ...
                        1.775	-22.9	34.6	-137	98.5	78.2; ...
                        4.042	-27.8	-64.5	74.5	88.4	73.6; ...
                        7.937	-23.6	-32.9	127.7	91.3	78.3; ...
                        9.424	-24.8	52.6	-119.6	103.8	87; ...
                        9.708	-30.0	-132.1	-9.1	80.3	70.6; ...
                        12.525	-27.7	77.2	-83.8	86.5	72.9; ...
                        ];
                    obj.Channel.PDP_dB = [obj.CDL(:,2) obj.CDL(:,1)*obj.DS]';
                    
                    obj.c_ASD = 5; %degrees
                    obj.c_ASA = 8;
                    obj.c_ZSD = 3;
                    obj.c_ZSA = 3;
                    obj.XPR_dB = 11;
                    
                case{'CDL_E'}
                    obj.CDL = [ ...
                        0.000	-0.03	0	-180	99.6	80.4; ...
                        0.000	-22.03	0	-180	99.6	80.4; ...
                        0.5133 	-15.8	57.5	18.2	104.2	80.4; ...
                        0.5440	-18.1	57.5	18.2	104.2	80.4; ...
                        0.5630	-19.8	57.5	18.2	104.2	80.4; ...
                        0.5440	-22.9	-20.1	101.8	99.4	80.8; ...
                        0.7112	-22.4	16.2	112.9	100.8	86.3; ...
                        1.9092	-18.6	9.3	-155.5	98.8	82.7; ...
                        1.9293	-20.8	9.3	-155.5	98.8	82.7; ...
                        1.9589	-22.6	9.3	-155.5	98.8	82.7; ...
                        2.6426	-22.3	19	-143.3	100.8	82.9; ...
                        3.7136	-25.6	32.7	-94.7	96.4	88; ...
                        5.4524	-20.2	0.5	147	98.9	81; ...
                        12.0034	-29.8	55.9	-36.2	95.6	88.6; ...
                        20.6419	-29.2	57.6	-26	104.6	78.3; ...
                        ];
                    
                    obj.c_ASD = 5; %degrees
                    obj.c_ASA = 11;
                    obj.c_ZSD = 3;
                    obj.c_ZSA = 7;
                    obj.XPR_dB = 8;
                    
                    obj.Channel.PDP_dB = [obj.CDL(:,2) obj.CDL(:,1)*obj.DS]';

                otherwise
                    error('Channel not supported');
            end
            % user speed
            obj.user_speed = init.user_speed;
        end
    end

    methods 
        function obj = calc(obj)
            obj.Tc = 1/(obj.delta_f_max*obj.Nf);
            obj.Ts = 1/(obj.delta_f_ref*obj.Nf_ref);
            obj.kappa = obj.Ts/obj.Tc;
            obj.N_u = 2048*obj.kappa*2^(-obj.mu);
            obj.N_cp_0_7 = 144*obj.kappa*2^(-obj.mu) + 16*obj.kappa;
            obj.N_cp_others = 144*obj.kappa*2^(-obj.mu);
            obj.symbol_duration(1) = (obj.N_u + obj.N_cp_0_7)*obj.Tc;
            obj.symbol_duration(2) = (obj.N_u + obj.N_cp_others)*obj.Tc;
            obj.T_actual_sampling = (obj.N_u*obj.Tc)/obj.num_FFT;  
            obj.sequence_length = obj.total_rs_num*2+1;
            obj.SampleRate = 1/obj.T_actual_sampling;
            obj.num_cp(1) = (obj.N_cp_0_7*obj.Tc)/obj.T_actual_sampling;
            obj.num_cp(2) = (obj.N_cp_others*obj.Tc)/obj.T_actual_sampling;
            obj.num_data(1) = (obj.N_u*obj.Tc)/obj.T_actual_sampling;
            obj.num_data(2) = (obj.N_u*obj.Tc)/obj.T_actual_sampling;
            obj.L = obj.num_cp(2);%*10; % use shorter
        end
    end

end
